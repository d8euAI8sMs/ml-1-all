#pragma once
#include <FeatureExtraction.h>
#include <opencv2/ml.hpp>

/**Объект для проведения распознавания моментов.*/
class MomentsRecognizer
{
protected:
	/**Массив распознанных значений. Ключ - номер активированного выходного нейрона. 
		Значение - значение цифры.*/
	std::vector<std::string> values;

	/**Нейронная сеть.*/
	cv::Ptr<cv::ml::ANN_MLP> pAnn;

	/*****************************************************************************/
	/**************Эту часть необходимо реализовать самостоятельно.***************/
	/*****************************************************************************/

	/**Преобразовать моменты изображения ко входу нейронной сети.
	 * @param moments - моменты изображения.
	 * @return - Значение входа нейронной сети.
	 */
	virtual cv::Mat MomentsToInput(fe::ComplexMoments& moments) = 0;

	/**Преобразовать выход сети в значение символа.
	 * @param output - выход нейроной сети.
	 * @return - распознанное значение символа.
	 */
	virtual std::string OutputToValue(cv::Mat output) = 0;
	/********************************************************************************/
public:
	/**Конструктор по умолчанию*/
	MomentsRecognizer();
	
	/**Деструктор по умолчанию.*/
	virtual ~MomentsRecognizer();

	/**Сохранить объект для распознавания в файл.
	* @param filename - имя файла для сохранения
	* @return true - файл успшно сохранен, false - файл не сохранен.
	*/
	virtual bool Save(std::string filename);

	/**Прочитать объект для распознавания из файла.
	* @param filename - имя файла с объектом для распознавания.
	* @return true - сеть успешно считана, false - сеть не считана.
	*/
	virtual bool Read(std::string filename);

	/**Выполнить простейшую оценку точности распознавания сети.
	* @param moments - набор тестовых данных. Это ассоциативный массив.
	*					Ключ - значение символа (например "5")
	*                  Значение - набор разложений разчных вариаций этого символа.
	* @return - процент верного распознавания на тестовой выборке.
	*/
	virtual double PrecisionTest(std::map<std::string, std::vector<fe::ComplexMoments>> moments);

	/**Распознать символ по моментам
	 * @param moments - моменты по которым проводится распознавание.
	 * @return - распознанное значение символа.
	 */
	virtual std::string Recognize(fe::ComplexMoments & moments);

	/*********************************************************************************/
	/***********************Этот метод необходимо релизовать самостоятельно.**********/
	/*********************************************************************************/
	/**Обучить нейронную сеть.
	 * @param moments - набор обучающих данных. Это ассоциативный массив.
	 *					Ключ - значение символа (например "5")
	 *                  Значение - набор разложений разчных вариаций этого символа.
	 * @param layers - конфигурация скрытых слоев будущего персептрона.
	 *					Ключ - номер СКРЫТОГО слоя.
	 *					Значение - количество нейронов в слое.
	 * @param max_iters - максимальное количество итераций при обучении.
	 * @param eps - требуемая точность распознавания на обучающей выборке.
	 * @param speed - скорость обучения = коэффициент перед корректировкой к весу.
	 * @return true - сеть успешно обучена, false - сеть не обучена.
	 */
	virtual bool Train(
		std::map<std::string, std::vector<fe::ComplexMoments>> moments, 
		std::vector<int> layers,
		int max_iters = 100000,
		float eps = 0.1,
		float speed = 0.1) = 0;
	/************************************************************************************/
};

